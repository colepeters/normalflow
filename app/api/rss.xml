<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Normal Flow</title>
        <link>https://normalflow.pub</link>
        <description>Dispatches on design &amp; engineering</description>
        <lastBuildDate>Mon, 20 Mar 2023 20:27:43 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://normalflow.pub via Feed for Node.js</generator>
        <language>en</language>
        <copyright>All rights reserved 2023, Cole Peters</copyright>
        <item>
            <title><![CDATA[Redefining Developer Experience]]></title>
            <link>https://normalflow.pub/posts/redefining-developer-experience</link>
            <guid>https://normalflow.pub/posts/redefining-developer-experience</guid>
            <pubDate>Tue, 28 Feb 2023 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>If recent activity is any indication, 2023 is looking like it could be a year of upheaval in the web development industry. For some, this upheaval may be welcome, and indeed a long time coming; for others, it may be more discomforting.</p>
<p>As <a href="https://begin.com/blog/posts/2023-02-21-why-does-everyone-suddenly-hate-single-page-apps" rel="noopener noreferrer" target="_blank">Simon previously mentioned</a>, Guillermo Rauch, CEO of Vercel, <a href="https://twitter.com/rauchg/status/1619492334961569792" rel="noopener noreferrer" target="_blank">recently tweeted</a> that ‘SPAs were a zero interest rate phenomenon.’ Although criticism of the Single Page Application (SPA) architecture had been growing for quite some time before this, Guillermo’s tweet certainly amplified the debate. A number of articles were published shortly thereafter, responding to this tweet and more broadly the impact of modern JavaScript frameworks (and Guillermo’s own role in popularizing them). Among those articles were pieces from <a href="https://andy-bell.co.uk/speed-for-who/" rel="noopener noreferrer" target="_blank">Andy Bell</a>, <a href="https://infrequently.org/2023/02/the-market-for-lemons" rel="noopener noreferrer" target="_blank">Alex Russell</a>, and <a href="https://www.matuzo.at/blog/2023/single-page-applications-criticism/" rel="noopener noreferrer" target="_blank">Manuel Matuzović</a>.</p>
<p>This article is not an argument for or against SPAs per se. Instead, I want to focus on a theme running through these articles and the accompanying dialogue throughout the web development community — that is, the topic of developer experience (DX).</p>
<blockquote>
<p>I’ve always found the focus on developer experience as a framework feature uncomfortable. […] I personally think developer experience is one of the least important aspects.<br>
—<a href="https://andy-bell.co.uk/speed-for-who/" rel="noopener noreferrer" target="_blank">Andy Bell</a></p>
</blockquote>
<blockquote>
<p>Once the lemon sellers embed the data-light idea that improved “Developer Experience” (“DX”) leads to better user outcomes, improving “DX” became and end unto itself. […] As marketing goes, the “DX” bait-and-switch is brilliant, but the tech isn’t delivering for anyone but developers.<br>
—<a href="https://infrequently.org/2023/02/the-market-for-lemons" rel="noopener noreferrer" target="_blank">Alex Russell</a></p>
</blockquote>
<blockquote>
<p>If I hear one more time about how developer experience is better and crickets for user experience I’ll implode<br>
—<a href="https://bell.bz/@fox@front-end.social/109785750860828976" rel="noopener noreferrer" target="_blank">Karolina Szczur</a></p>
</blockquote>
<p>For years now, the most popular JS frameworks have carried out intense marketing initiatives based on the premise of improving DX. On the surface, this doesn’t seem too contentious — developers are, after all, the consumers of these frameworks, and developers are the ones who will advocate for using one framework or another within their organizations. Why not prioritize the development and marketing of quality of life improvements for those developers?</p>
<p>As the quotes above describe, the problem is that this massive focus on DX has <a href="https://infrequently.org/2022/12/performance-baseline-2023/" rel="noopener noreferrer" target="_blank">measurably been to the detriment of user experience (UX)</a>. Frameworks promising next generation DX are almost invariably the same ones prone to delivering sub par UX, due largely to factors such as:</p>
<ul>
<li><a href="https://almanac.httparchive.org/en/2022/javascript" rel="noopener noreferrer" target="_blank">Ballooning JS bundle sizes</a>, which require more of an end user’s time (and money) to be downloaded, parsed, and executed on the browser</li>
<li>Reliance on JS being properly downloaded, parsed and executed on those browsers (which is <a href="https://www.kryogenix.org/code/browser/everyonehasjs.html" rel="noopener noreferrer" target="_blank">far from guaranteed</a>)</li>
<li><a href="https://jvns.ca/blog/2023/02/16/writing-javascript-without-a-build-system/" rel="noopener noreferrer" target="_blank">Build systems</a> being a core feature of many of these frameworks (TypeScript and JSX, for example, cannot be run in the browser, so they must be transpiled to JS), thus creating a delta between authored code and executed code which can make debugging significantly more challenging</li>
<li>Frequent breaking changes and shifting API surfaces, requiring developers to repeatedly relearn core aspects of these frameworks, which can also make an excellent breeding ground for bugs</li>
</ul>
<p>This relationship between apparent improvements to DX and obvious degradations in UX begs the question: shouldn’t we just drop the focus on DX altogether?</p>
<p>Personally, I’d raise a different question — that is: what is it about these promises of great developer experience that is consistently delivering poor user experiences?</p>
<h2 id="what-do-we-mean-when-we-say-%E2%80%98dx%E2%80%99%3F">What do we mean when we say ‘DX’?</h2>
<p>While the definition of ‘developer experience’ could be debated, <a href="https://microsoft.github.io/code-with-engineering-playbook/developer-experience/" rel="noopener noreferrer" target="_blank">Microsoft’s take</a> feels like a good summation that most could agree on:</p>
<blockquote>
<p>Developer experience refers to how easy or difficult it is for a developer to perform essential tasks needed to implement a change. A positive developer experience would mean these tasks are relatively easy for the team.</p>
</blockquote>
<p>When we talk about DX, we’re generally referring to various measures that impact a software team’s ability to get things done with as little difficulty as possible. For a product to deliver good DX, it would typically need to be:</p>
<ul>
<li>easy to learn (to help teams get up to speed quickly)</li>
<li>efficient (to enable tasks to be completed as quickly as possible)</li>
<li>consistent (to prevent teams from wasting time relearning how to do their work)</li>
<li>transparent (to allow bugs to be diagnosed and solved easily)</li>
<li>resilient (to ensure what works today also works next year)</li>
</ul>
<p>At the end of the day, the promise of good DX typically boils down to improved team velocity and a reduction of points of failure. This makes sense — software teams are often encouraged to work faster and to deliver more value and fewer bugs, in order to generate more business for their company in as short a time as possible.</p>
<p>But while ‘more business’ inherently requires end users to actually engage with the product or service being labored over, it’s hard to miss that end users are typically not represented within the goals of developer experience. This is not always the case — some frameworks like <a href="https://remix.run/" rel="noopener noreferrer" target="_blank">Remix</a> and <a href="https://nuxt.com/" rel="noopener noreferrer" target="_blank">Nuxt</a> do (as of this writing) allude to improvements to user experience in their marketing materials — but more frequently, good DX is simply presumed to cause a trickle down effect to the benefit of end users. <a href="https://andy-bell.co.uk/speed-for-who/" rel="noopener noreferrer" target="_blank">This is, unfortunately, not often the case</a>.</p>
<p>But even if good DX doesn’t inherently deliver good UX, surely it at least delivers on improving the quality of life and work of developers, right? Personally, I’m not sure this is often the case, either.</p>
<h2 id="developer-experience-in-practice">Developer experience in practice</h2>
<p>I’ve been working on the web professionally for the better part of 15 years — and for years before that as an amateur — and my work has primarily revolved around design and frontend engineering. At the risk of painting too pastoral a scene, my first years in frontend were almost blissfully simple compared to the status quo of today. My toolchain consisted of HTML (version 4), CSS (version 2), and a sprinkling of jQuery on those rare occasions when I could understand how to use it. Sometimes I’d bash out some half decent PHP if a client needed some help on their Wordpress. Getting my code from my computer to the Web was a matter of dropping my HTML and CSS files from Finder onto an FTP client (after checking to make sure I wasn’t about to blow away the work of another developer, of course — version control was not something I’d yet encountered). What might be considered ‘developer experience’ at this point in my career mainly consisted of learning web platform fundamentals — largely from books, or from articles posted by generous and talented professionals in the industry. A simpler time, indeed.</p>
<p>Fast forward to 2022, when I was working as a lead frontend engineer at a technology startup. At this point in my career, I’d learned to wield several major versions of React with substantial expertise (starting with class components, then function components, then hooks…), along with the wider React ecosystem. React Router, Redux, Redux Select, Redux Saga, the Context API, XState, React Query, Styled Components, Styled System, Radix, React Spring, Framer Motion, React DND, DNDKit, Jest, Enzyme, React Testing Library, NextJS, and others were all under my belt, and in most cases my experience in using them tended toward the skilled end of the spectrum. And this was just to render and test UI!</p>
<p>Deeper under the hood, I was working with NPM, Babel and Webpack to manage packages and builds (having previously worked with tools like Bower, Grunt, and Gulp), and deployment providers like Heroku and Vercel. Of course, all of this was managed through GitHub version control, with some of the pipeline instrumented with GitHub Packages and Actions, and with everything running through ESLint and Prettier to catch formatting inconsistencies, opportunities for optimization, and potential bugs. Underlying all of this were my ongoing efforts to stay on top of developments in HTML, CSS, and JS/ES-What-Year-Is-This, including aspects like accessibility and performance, but also with respect to concepts like functional programming and frontend architecture in general. I was also trying to get familiar with the principles of technical leadership, as I was continuing to advance in my career.</p>
<p>When I decided to start looking for a new role later in the year, I realized I’d likely need to start picking up TypeScript to maintain my competitiveness as a candidate for frontend engineering roles, and I’d likely have to start picking up knowledge about other frameworks like Vue or Svelte, and the wider ecosystems and metaframeworks that go along with them. Oh, and along with these technologies, I was also constantly working to excel in my speciality as a design engineer — which meant staying on top of design trends and <a href="https://www.interaction-design.org/literature/topics/gestalt-principles" rel="noopener noreferrer" target="_blank">gestalt principles</a>, the rapidly shifting space of design systems, and the soft skills associated with being able to perform in these spaces.</p>
<p>At this point, let me assure you: I am not enumerating all of these areas of concern to impress you or to sell you on my expertise. The picture I’ve just painted you is the reality of ‘developer experience’ in the 2020s — at least as far as frontend engineering is concerned. ‘Developer experience’ means getting familiar with an increasingly expansive array of tools — all of which, frankly, change to some degree every single year. What’s hot today is not tomorrow, what worked one way yesterday is broken today. And every day, the expectation is that you accept this state of affairs, and keep the pedal to the metal (and maybe hit the turbo thruster while you’re at it). Your team’s velocity depends on it.</p>
<p>There was a time, probably somewhere between 2018 and 2021 where the amount of things I knew — indeed, <em>had</em> to know in order to do my job at my level — filled me with pride and excitement. I even got to feeling a little cocky about the amount of framework minutia taking up space in my brain (which in retrospect might be a bit cringe worthy, but hey, we’re all works in progress). As 2022 came to a close and I began to reconsider my professional goals, however, the amount of things I <em>had</em> to know started to feel less like an accomplishment and more like a burden. I began to realize that every hour I spent learning how React 18 was subtly but critically different from React 17 was an hour I’d have to spend again next year when React 19 inevitably landed (substitute ‘React’ for your JS tool of choice — the outcome will likely be the same or worse). At the end of the day, how much of this thrash was making me more effective at crafting supremely enjoyable user experiences?</p>
<p>Suffice it to say that Late 2022 Cole got pretty frustrated with the state of developer experience; I even considered transitioning entirely into a technical writing role at one point, just to get out of the constant cycle of relearning how to do my job as an engineer. (Thankfully, an offer from the crew at Begin saved me from the stress of a complete change of career, and also gave me the opportunity to get back to working with platform fundamentals!)</p>
<p>Of course, all of what I’ve just told you is anecdotal, and not all engineers will have the exact same ‘developer experience’. But based on the aforementioned blog posts published recently, I’m willing to bet that my experience isn’t terribly unique. If that’s true, this should be a huge red flag for our industry. Developer experience of this sort leads to a number of serious problems:</p>
<ul>
<li>Senior engineers are required to know an ever exploding number of technologies in order to carry out the most basic parts of their jobs.</li>
<li>The vast number of things one needs to know to advance to a senior engineer position thus makes that progress harder to realize.</li>
<li>This can in turn make for a more intimidating career path for earlier career engineers — or, alternatively, it can create the impression that professional seniority is simply about the number of things you know as opposed to the quality of work you can produce with a subset of those things.</li>
</ul>
<p>Perhaps most problematic of all is the effect that contemporary developer experience has on educational programs (be they traditional classes, bootcamps, workshops, or anything in between). Such a rapidly expanding and ever changing technological ecosystem necessarily means that curricula struggle to keep up, and that the fundamentals of web development (e.g. HTML, CSS, HTTP, browser APIs…) are often glossed over in favor of getting students into the technologies more likely to land them jobs (like React and its many many pals). This leads to an outpouring of early career developers who may speak confidently about things like React hooks or Redux state reducers, but who also lack any concept about the nature of HTML semantics or the most basic accessibility considerations. To be clear, I’m not throwing shade at those developers — they have been failed by an industry obsessed with the new and shiny at the expense of foundational practices and end user experiences.</p>
<p>And so, I ask: what exactly are we buying when we are sold ‘developer experience’ today? Who is benefitting from it? And if it is indeed something many of us aren’t too excited about (to put it kindly), how can we change it for the better?</p>
<h2 id="realigning">Realigning</h2>
<p>In my opinion, simply dropping our industry’s focus on DX is not the solution here. <a href="https://slash.co/articles/people-behind-your-tech-how-many-developers-are-there-in-the-world/" rel="noopener noreferrer" target="_blank">There were over 26 million web developers in the world as of 2021</a>, and that number is expected to double by 2030. This is a massive industry of people who care about their experience with web technologies, and simply telling them to drop the focus on their quality of life for the sake of altruism isn’t likely to cut it.</p>
<p>Instead, I think we need to carefully consider what we mean when we talk about developer experience — and how what we say translates into what we do.</p>
<p>If I may risk verging on the idealistic, I would suggest that developer experience needs to pivot from a concept centered on feeling fast and living on the bleeding edge to one based on the enabling of developers to deliver reliable and first rate end user experiences — for as many users as possible, and for as long as possible. This doesn’t mean developers shouldn’t have great tools with which to carry out the crafting of great UX — but it does shift the narrative from one of ‘trickle down UX’ to something more honest, where the fruit of our labors is prioritized a little more above our labors themselves.</p>
<p>As discussed, developer experience today encompasses a nearly countless number of technologies that change and break both reliably and regularly, and which deliver poor user experiences rife with loading spinners, random bugs that are difficult to diagnose and fix, and interminable load times (especially for users not fortunate enough to be working with a rock solid connection to fiber based internet). But there are alternatives — alternatives focused first and foremost not on the new and shiny, but on the stable, enduring, and reliable.</p>
<h3 id="a-brief-tangent-on-scissors">A brief tangent on scissors</h3>
<p>Allow me a moment to construct a metaphor. Take a look at these scissors:</p>
<p><post-image src='/_public/images/dx/tajika-herb-clippers.jpg' alt='A pair of herb clippers by Tajika. Rustic looking appearance, two small hand forged blades are joined by an elongated U shaped piece of steel.'></post-image></p>
<p>These scissors may look ancient, but in fact they are herb clippers, crafted today by Tajika Haruo Ironworks in Oto city, Japan. The father and son duo of Takeo and Daisuke Tajika forge these clippers by hand, transforming raw steel into precise configurations. These herb clippers in particular are intended for the kind of work where ordinary scissors would lack the required measure of precision: the delicate trimming of herbs in the garden or kitchen, or the creation of exquisite floral arrangements. Because of their design, the user need only apply a small amount of pressure to make a perfect cut, and the extreme sharpness of the blades means that the plants from which cuttings are made will be able to heal with the least amount of effort (just as in human tissue, where an incision from a scalpel is easier to heal than, say, the sort of rough abrasion caused by accidentally running one’s hand into cheese grater — don’t ask me how I know).</p>
<p>In short, these herb clippers are designed to do one thing, and they do it extremely well; indeed, they have done so for centuries since their design was first introduced. Secondarily to this, they are also exquisitely beautiful; the simplicity of their purpose is born out in their rustic, utilitarian design. No bells or whistles, nothing unnecessary, just a pair of perfectly edged blades joined together by a simple spring mechanism.</p>
<p>Now consider these ‘scissors’:</p>
<p><post-image src='/_public/images/dx/swiss-army-knife.jpg' alt='A Swiss Army Knife, with its can opener, knives, scissors, screwdriver, and other assorted tools exposed.'></post-image></p>
<p>Ah, the venerable Swiss Army Knife. A pair of herb clippers this is not. The Swiss Army Knife takes the opposite approach of the Tajikas. This is a tool designed to maximize functionality — a tool for heading out into the great unknown, for tackling emergencies and tasks you may not be able to anticipate. With this one piece of equipment, you could accomplish any number of tasks, from fastening a screw, opening a can or bottle, chopping small vegetables, preparing a fish for cooking, whittling a piece of wood, and, yes, cutting up materials with the scissors. I wouldn’t expect to be able to do any of these tasks particularly <em>well</em> (nor would I trim herbs or flowers with those scissors if another option was available), but that’s never been the point of the Swiss Army Knife; the point has always been to be prepared to deal with a variety of tasks with a modicum of success. It’s a tool for survival, not fine craft.</p>
<p>Contemporary developer experience, to me, feels very much like we’ve been building websites with the code equivalent of Swiss Army Knives. We’ve erected Swiss Army Knife schools, and venerated the ability to jump fluidly from the knife to the scissor to the can opener to the corkscrew, celebrating our speed with the screwdriver even as we ignore the fact that the screws we’ve installed all have stripped heads, and that the plants we’ve made cuttings from all bear unattractive scars that have prevented those same plants from putting energy into new growth. Meanwhile, the thought of going back to using older, more focused tools — like the herb clippers — seems unfathomable. Why return to such an outdated, limited tool when we have the Swiss Army Knife?</p>
<p>It’s understandable that those of us who may have invested many years of practice with Swiss Army Knives (okay, JS mega stacks) would be reticent to leave them behind — they’re familiar, they’re comfortable, even if we recognize their shortcomings, and after all, we spent all that time honing our skills with them. But I think it’s also a very worthwhile practice to consider whether <em>the experience</em> of using these tools is really something we’re enjoying (and if these tools are even right for the job), and more importantly, whether that experience is leading to positive outcomes for those using what we make.</p>
<p>But herein lies an opportunity to refocus ourselves, our tools, and our craft. Why would we abandon the Swiss Army Knife? Because it’s not the right tool for the job — it’s not really that enjoyable to use, its many tools don’t even work that well, and the work we make with them isn’t of the caliber it deserves to be for those making use of it.</p>
<p>If we want to achieve perfect trimming of herbs and delicate plants, we can choose to get comfortable with those herb clippers. If we want to prepare a meal, we can seek out a single good kitchen knife (please ditch those knife block sets, they’re horrible and a waste of money). And if we want to create lasting, reliable, excellent user experiences? Well, I know of a tool for that too. It’s been around for awhile, and it might appear a little bit primitive to some at first glance, but it’s actually quite effective — and it happens to come with a pretty great developer experience, too.</p>
<h2 id="the-web-platform-as-developer-experience">The web platform as developer experience</h2>
<p>To restate my proposition, I believe ‘good developer experience’ needs to be reimagined as the enabling of developers to deliver reliable and first rate end user experiences — for as many users as possible, and for as long as possible. With this goal in mind, I think we’d be hard pressed to find a better starting point than <a href="https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/The_web_and_web_standards#overview_of_modern_web_technologies" rel="noopener noreferrer" target="_blank">the fundamentals of the web platform</a> — that is, web browsers, HTTP, HTML, CSS, and JavaScript. These technologies have existed for decades in a near total state of backwards compatibility, while also consistently evolving to offer web developers ever more powerful techniques to deliver exceptional user experiences.</p>
<p>It’s true that many modern JavaScript frameworks began as attempts to fill in some gaps in web standards, but in 2023, many of those gaps have been filled by the web standards themselves. HTML now has templates and custom elements, CSS has an incredible range of APIs for animation and complex, dynamic, and responsive layouts, and JavaScript itself has evolved to become a powerful programming language without the need for supersets or frameworks.</p>
<p>Browsers, meanwhile, have become better at converging on implementations (for the most part, anyway… WebKit has some catching up to do) and at offering built in optimizations like back/forward caching, and they automatically update so that end users have access to the best new features. Cloud based deployment solutions and general increases in global internet speeds have done much to mitigate slow response times (providing you’re not shipping megabytes of JavaScript over the wire), allowing multipage applications to become just as fast (if not faster overall) than single page applications.</p>
<p>All of this is available to every single web developer on the planet, and (perhaps with the exception of deployment providers) without having to <code>npm install</code> a single thing. Even more impressively, time spent learning these fundamentals today is not time you will need to spend again next month or next year. Because of the web’s inherent backwards compatibility, the knowledge you acquire today will never go out of date. This is not, however, to say that the web platform is stagnant and never changes — changes are arriving faster than ever before, but these changes are additive and stable, rather than subtractive and in constant flux.</p>
<p>On top of all of this, web platform fundamentals deliver exceptional user experiences, as long as they are used with an eye towards accessibility and performance. The results that can be achieved solely with vanilla HTML, CSS, and the lightest sprinkling of JavaScript in 2023 is truly remarkable (just wait until you see what we’ve been cooking up for the launch of <a href="https://enhance.dev" rel="noopener noreferrer" target="_blank">Enhance</a> 1.0), and these results can be delivered to end users with unparalleled speed and resiliency.</p>
<p>The web standards platform in 2023 is, to put it bluntly, fantastic. I joined Begin in 2022 and haven’t touched a lick of React or any of the aforementioned frameworks or ecosystems since (aside from NPM), and while I accept that my position in the company may bias me, I have to say: this has been both a relief and a joy. Getting back into working with the fundamentals has been supremely exciting, especially where picking up knowledge of the world of web components is concerned. I spend so much more of my time solving important (end user) problems now, and when my work ships, it’s delivered in a fraction of the time and with so much more stability and resiliency than anything I’ve shipped in the past decade.</p>
<p>I won’t go so far as to say the web platform is perfect. There are things about the nature of web components (primarily their tight coupling to JavaScript classes that are designed to run on the client) that frustrate me. There are sometimes hold ups (like <a href="https://github.com/WebKit/standards-positions/issues/97" rel="noopener noreferrer" target="_blank">WebKit</a>) to certain standards being implemented universally (like <a href="https://lists.w3.org/Archives/Public/public-webapps/2013OctDec/1051.html" rel="noopener noreferrer" target="_blank">extending built in HTML elements</a>). But compared to the feeling of permanent red alert that I felt working with JS mega stacks, things are blissfully calm.</p>
<p>What’s really exciting for me to think about is the fact that more people getting on board with web standards makes for more people to help push those standards ahead. Imagine if instead of fighting for certain updates to land in React, we could all work together to help certain updates land across the entire web platform, and every single user of it. Isn’t that a developer experience that would be truly exciting?</p>
<p>To put it simply, the developer experience I’ve been wanting for years has, in fact, been around for years — I was just too caught up in other stacks to notice it. And the fact that this developer experience also has the power and tendency to create exceptional user experiences…? Now that’s a phenomenon I want to be a part of.</p>
<h2 id="first-steps">First steps</h2>
<p>If you’re ready to take the first step towards better DX and better UX, the first step is to (re)acquaint yourself with web platform fundamentals. The Mozilla Developer Network (MDN) has <a href="https://developer.mozilla.org/en-US/docs/Learn/Front-end_web_developer" rel="noopener noreferrer" target="_blank">a great learning pathway touching on HTML, CSS and JavaScript</a>, and this could be a great place to start.</p>
<p>Once you’re familiar with the basics (or if you are already and want to take them further), <a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components" rel="noopener noreferrer" target="_blank">Web Components</a> offer a standards based methodology for creating custom reusable components. As previously mentioned, Web Components require JavaScript to run in the browser by default, and their class based interface can take some getting used to. Enhance, our HTML first framework, steps around this issue by providing you with a standards compliant way to render custom elements on the server, only requiring you to interface with the Web Components JavaScript API when progressive enhancement is called for. Plus, we’ve got a really cute mascot. <a href="https://enhance.dev" rel="noopener noreferrer" target="_blank">Give Enhance a try today!</a></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Past Informs the Present: Begin’s Approach to CSS]]></title>
            <link>https://normalflow.pub/posts/past-informs-the-present-begins-approach-to-css</link>
            <guid>https://normalflow.pub/posts/past-informs-the-present-begins-approach-to-css</guid>
            <pubDate>Tue, 10 Jan 2023 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>CSS occupies an interesting position among web technologies: while it can appear almost quaint in its simplicity, it’s also been interpreted by some as the most vexing language in web development. Despite its approachability, CSS sometimes gets a bad rap — one that I believe derives from a fundamental misunderstanding of CSS’ history, evolution, and function as an API for styling on the web.</p>
<p>In this article, we’re going to review some of that history and evolution. We’ll then use that information to inform a focus on several methodologies — some battle tested, some more recent — for making the process of styling web apps and components both enjoyable and effective.</p>
<h2 id="the-origins-of-css">The origins of CSS</h2>
<p>In order to gain a deep understanding of CSS, it’s important to first understand the ecosystem from which it emerged: that is, the early days of the World Wide Web. Getting familiar with this context is essential to understanding why CSS works the way it does — and also provides some insight into just how far it has come since its inception.</p>
<p>In contrast to the dynamic and interactive nature of the Web of today, the Web started out as a comparatively simple medium: that is, one for publishing documents. This intent was clearly stated on <a href="http://info.cern.ch/hypertext/WWW/TheProject.html" rel="noopener noreferrer" target="_blank">the first ever website, authored by Tim Berners-Lee</a>:</p>
<blockquote>
<p>The WorldWideWeb (W3) is a wide-area hypermedia information retrieval initiative aiming to give universal access to a large universe of documents.</p>
</blockquote>
<p>This first website was launched on August 6, 1991, but the world would have to wait until December of 1996 for <a href="https://www.w3.org/Press/CSS1-REC-PR.html" rel="noopener noreferrer" target="_blank">the official arrival of CSS</a>, at the hands of Håkon Wium Lie and Bert Bos. At the risk of oversimplifying things, at its highest level, this first draft of CSS could be reduced to three fundamental tenets:</p>
<ol>
<li>CSS is a language for authoring style sheets for HTML documents.</li>
<li>CSS encourages the independence of markup from style sheets, thereby preserving content fidelity and structure, while allowing for the application of reusable styles.</li>
<li>CSS’ style sheets <em>cascade</em> — that is, styling rules declared by the user agent may be overruled by styles declared by the document author, which themselves may be overruled by the end user.</li>
</ol>
<p>This third tenet — the cascading nature of CSS — was a source of great debate at the time, and traces of this debate even carry on amongst web practitioners today. And yet, CSS’ cascade is perhaps one of its most defining attributes: it underscores the web as a medium where content and its presentation is informed not only by browser makers, but also by content authors, end users, and those users’ devices and their capabilities. Even from the Web’s earliest days as a platform for static documents, CSS was, in its own way, declaring in no uncertain terms that the presentation of content on the Web must be approached not dictatorially, but democratically — or, to use a more modern and technical term: responsively.</p>
<p>The second tenet, referencing CSS’ global scope and its independence from HTML, will of course be a familiar topic to anyone who has touched frontend development over the past two decades. We’ll get deeper into this later in the article.</p>
<p>The first tenet I’ve proposed above, however, is perhaps the most impactful, yet also the easiest to overlook. In fact, I believe the nature of this principle is one that a great many web developers to this day tend to forget (or never learn in the first place), and this in turn has become a source of some of the deepest struggles in frontend web development over the years.</p>
<p>And so, let us spell it out clearly: <strong>CSS, as game changing as it was, was not created as an application or component styling API</strong> — it was designed as a means of styling static documents, authored in HTML. Documents and applications (and components), however, present drastically different contexts for design. The nature of the standardized Web, meanwhile, as one of (perhaps the most) <a href="https://www.w3.org/People/Bos/DesignGuide/compatibility.html#:~:text=The%20Web%20itself%20is%20designed,of%20files%2C%20not%20just%20HTML." rel="noopener noreferrer" target="_blank">backwards compatible</a> software platforms, has in turn meant that CSS’ origin story was always going to be inescapable. Unlike so many technology stacks of today, turning CSS into an application styling API would never be a matter of simply shipping a breaking change and letting end users deal with the fallout. As the web matured into a platform not just for documents, but rather one for the multidirectional flow of <em>information</em>, CSS as its UI layer would have to evolve gradually along with it.</p>
<p>This, then, establishes what I consider the <em>grain</em> of CSS — a grain that many web developers continue to struggle with.</p>
<h2 id="with-and-against-the-grain">With and against the grain</h2>
<p>With the transition away from documents and toward applications and components, web developers began devising methodologies to execute increasingly complex user interfaces with a styling API that was still heavily targeted towards static documents. Some of these methodologies were successful — even essential — in pushing both CSS and styling on the web more broadly into the future; others were less so. In my experience, the most important developments in CSS methodologies were those that were designed with the grain of CSS in mind; the least successful candidates, meanwhile, tended to push quite hard against it.</p>
<p>Perhaps the most important CSS methodology to emerge during the web’s transition towards application-like websites was <a href="https://github.com/stubbornella/oocss/wiki" rel="noopener noreferrer" target="_blank">Object Oriented CSS (OOCSS)</a>, devised by <a href="http://www.stubbornella.org/content/" rel="noopener noreferrer" target="_blank">Nicole Sullivan</a> in 2009. Nicole’s now legendary article, <a href="http://www.stubbornella.org/content/2010/06/25/the-media-object-saves-hundreds-of-lines-of-code/" rel="noopener noreferrer" target="_blank">‘The Media Object Saves Hundreds of Lines of Code’</a>, represented a fundamental rethinking on the composition of <a href="https://css-tricks.com/css-ruleset-terminology/" rel="noopener noreferrer" target="_blank">CSS rulesets</a> and their relationship to HTML content. Instead of writing CSS styles around specific HTML content or basing styles on the location of content within the DOM, OOCSS prioritized writing reusable styling rules based on design patterns (in the case of the media object: ‘a fixed size media element (e.g. image or video) along with other variable size content (e.g. text)’). As perhaps the first instance of a CSS methodology systematically informed by a visual pattern language, OOCSS was also a critical step towards a more modular, reusable approach to writing CSS.</p>
<p>As style sheets became the responsibility of larger and larger teams, CSS’ global scope and <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity#:~:text=Specificity%20is%20an%20algorithm%20that,(or%20pseudo%2Delement)" rel="noopener noreferrer" target="_blank">specificity</a> were often at odds with team dynamics. Style collisions became increasingly common, where changes introduced by one developer would inadvertently affect styles elsewhere on the website. As the old joke goes: two CSS properties walk into a bar; a bar stool in a completely different bar falls over. As these issues and the number of people experiencing them multiplied, so too did new CSS methodologies, particularly those focused on style sheet architectures. Before long, we had <a href="http://smacss.com/" rel="noopener noreferrer" target="_blank">SMACSS</a>, <a href="https://suitcss.github.io/" rel="noopener noreferrer" target="_blank">SUIT CSS</a>, <a href="https://getbem.com/" rel="noopener noreferrer" target="_blank">BEM</a>, <a href="https://www.youtube.com/watch?v=1OKZOV-iLj4" rel="noopener noreferrer" target="_blank">ITCSS</a>, and more. Third party supersets of CSS also appeared during this time, such as <a href="https://sass-lang.com/" rel="noopener noreferrer" target="_blank">Sass</a> and <a href="https://lesscss.org/" rel="noopener noreferrer" target="_blank">LESS</a>, which gave style sheet authors access to scripting features like variables and loops.</p>
<p>The extent to which CSS supersets benefitted or hindered the progress of styling on the web is debatable. Sass, for example, should be credited for introducing variables to CSS, which in turn inspired CSS’ own <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties" rel="noopener noreferrer" target="_blank">custom properties</a> (which improved upon Sass’ implementation in several ways). In the same breath, however, I personally believe techniques such as nesting, mixins, loops, and extends, introduced by Sass and LESS, were less beneficial. These techniques resulted in excessively bloated and complex CSS being shipped to the browser. To add insult to injury, due to inherent differences between authored code and generated code, CSS written in these supersets became much harder to debug (a task which, due to increases in complexity, became increasingly necessary).</p>
<p>Similarly, and despite the best of intentions, some CSS methodologies could be considered more beneficial than others. For example, let’s take the ruleset format proposed by the likes of BEM, where classes are constructed with multifaceted declaration blocks bound to context aware class names. The ‘context aware’ part here is important — BEM’s <a href="https://getbem.com/naming/" rel="noopener noreferrer" target="_blank">‘Block, Element, Modifier’ construct</a> declares that classes should be named based on a hierarchy derived from both markup and state. This strategy introduces a dependency between the structure of a page’s markup and its styles, a strategy CSS itself had attempted to avoid.</p>
<p>BEM is not the only methodology to use this kind of ruleset format — many other methodologies rely on markup context (or content context) to inform the construction of classes. Herein lies the problem, though: while this approach could be said to encourage pleasant developer ergonomics, the results are inherently brittle (due to the tight coupling between markup and styles). On top of that, the prioritization of selector nomenclature above the actual styles being applied to those selectors often results in style sheets that are bloated with repeating property declarations — see for example these styles from the Financial Times’ website:</p>
<pre class="hljs"><code data-language="css"><span class="hljs-selector-class">.o-ads--label-left</span> <span class="hljs-selector-class">.o-ads__inner</span><span class="hljs-selector-pseudo">:before</span> {
  <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;▼ Advertisement ▼&quot;</span>;
  <span class="hljs-attribute">display</span>: block;
  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;
  <span class="hljs-attribute">text-align</span>: <span class="hljs-string">&quot;left&quot;</span>;
}
<span class="hljs-selector-class">.o-ads--label-right</span> <span class="hljs-selector-class">.o-ads__inner</span><span class="hljs-selector-pseudo">:before</span> {
  <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;▼ Advertisement ▼&quot;</span>;
  <span class="hljs-attribute">display</span>: block;
  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;
  <span class="hljs-attribute">text-align</span>: <span class="hljs-string">&quot;right&quot;</span>;
}
<span class="hljs-selector-class">.o-ads--label-center</span> <span class="hljs-selector-class">.o-ads__inner</span><span class="hljs-selector-pseudo">:before</span> {
  <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;▼ Advertisement ▼&quot;</span>;
  <span class="hljs-attribute">display</span>: block;
  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;
  <span class="hljs-attribute">text-align</span>: <span class="hljs-string">&quot;center&quot;</span>;
}
<span class="hljs-selector-class">.o-ads--label-with-borders</span> {
  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;
  <span class="hljs-attribute">text-align</span>: <span class="hljs-string">&quot;left&quot;</span>;
}
</code></pre>
<p>In these ways and others, many of the aforementioned methodologies could be said to work against the grain of CSS, despite their intent to make styling easier and more robust. As such, the process of writing and maintaining CSS in the mid 2010s had become increasingly complex; but it also set the stage for a radical rethinking, and a move towards simpler, more efficient, and more resilient methods of styling content on the web.</p>
<h2 id="the-atomization-of-css">The atomization of CSS</h2>
<p>For many years, the semantic nature of HTML led many to proclaim that CSS should also be written ‘semantically’. However, this tight coupling between HTML semantics and CSS selectors, despite being recommended even by the W3C as a best practice, does not have a basis in reality. <a href="https://developer.mozilla.org/en-US/docs/Glossary/Semantics" rel="noopener noreferrer" target="_blank">Content semantics in HTML</a> are expressed through the use of meaningful elements like <code>h1</code>, <code>nav</code>, <code>footer</code>, <code>ul</code>, etc., and the way in which these elements are structured to create a document tree. CSS, meanwhile — being a <em>presentational language</em> — has no notion of content semantics; there is no way for a machine to glean information about HTML content from a style sheet. Nicolas Gallagher, in <a href="https://nicolasgallagher.com/about-html-semantics-front-end-architecture/" rel="noopener noreferrer" target="_blank">an article I still consider to be of foundational importance</a>, spelled this out quite clearly in 2012:</p>
<blockquote>
<p>The primary purpose of a class name is to be a hook for CSS and JavaScript. If you don’t need to add presentation and behavior to your web documents, then you probably don’t need classes in your HTML.</p>
</blockquote>
<p>In the absence of a mandate to describe particular nodes of content or <a href="http://web.dfc.unibo.it/buzzetti/IUcorso2007-08/mdidattici/ontology-definition-2007.htm#:~:text=In%20computer%20and%20information%20science,some%20domain%2C%20real%20or%20imagined." rel="noopener noreferrer" target="_blank">ontological</a> relationships between them, CSS authors were free to consider other approaches to authoring CSS — and by the early 2010s, many were doing just that. The first article I recall reading that suggested a fundamental shift was underway was one written in 2013 by Thierry Koblentz, appropriately entitled <a href="https://www.smashingmagazine.com/2013/10/challenging-css-best-practices-atomic-approach/" rel="noopener noreferrer" target="_blank">‘Challenging CSS Best Practices’</a>. At the heart of Koblentz’s article was a well-argued overview of how so-called ‘best practices’ in CSS at the time often lead to multiple rewrites of both CSS and HTML whenever UI requirements change (that hardly ever happens, right?), leading to ever-growing, <a href="https://css-tricks.com/oh-no-stylesheet-grows-grows-grows-append-stylesheet-problem/" rel="noopener noreferrer" target="_blank">‘append only’ style sheets</a> that become more brittle over time. His proposal, worked out in practice during his time at Yahoo!, was simple but nigh on heretical to many at the time:</p>
<blockquote>
<p>The smaller the unit [in a larger system], the more reusable it is. To break down styles into irreducible units, we can map classes to a single style, rather than many. This will result in a more granular palette of rules, which in turn improves reusability.</p>
</blockquote>
<p>This Lego-like approach to CSS can arguably be traced back to Nicole Sullivan’s OOCSS (and, it could be argued, early ‘utility’ classes like <a href="https://css-tricks.com/clearfix-a-lesson-in-web-development-evolution/" rel="noopener noreferrer" target="_blank"><code>.clearfix</code></a>), but what Koblentz and others were proposing — generally referred to as ‘atomic CSS’ — took this approach to the logical extreme.</p>
<p>To illustrate the drastic difference in approaches, consider the following two implementations of the media object (for simplicity, implemented with flexbox):</p>
<figure>
<pre class="hljs"><code data-language="html"><span class="hljs-comment">&lt;!-- ‘Best practices’ media object --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css">
  <span class="hljs-selector-class">.media</span> {
    <span class="hljs-attribute">display</span>: flex;
  }

  <span class="hljs-selector-class">.media-img</span> {
    <span class="hljs-attribute">flex-shrink</span>: <span class="hljs-number">0</span>;
    <span class="hljs-attribute">padding-right</span>: <span class="hljs-number">8px</span>;
    <span class="hljs-attribute">width</span>: <span class="hljs-number">128px</span>;
    <span class="hljs-attribute">height</span>: <span class="hljs-number">128px</span>;
  }

  <span class="hljs-selector-class">.media-content</span> {
    <span class="hljs-attribute">flex-grow</span>: <span class="hljs-number">1</span>;
  }
</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;media&#x27;</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;media-img&#x27;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#x27;…&#x27;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&#x27;…&#x27;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;media-content&#x27;</span>&gt;</span>
    Here’s a traditional media object.
  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>

<span class="hljs-comment">&lt;!-- ‘Atomic’ media object --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css">
  <span class="hljs-selector-class">.flex</span> { <span class="hljs-attribute">display</span>: flex; }
  <span class="hljs-selector-class">.flex-shrink0</span> { <span class="hljs-attribute">flex-shrink</span>: <span class="hljs-number">0</span>; }
  <span class="hljs-selector-class">.flex-grow1</span> { <span class="hljs-attribute">flex-grow</span>: <span class="hljs-number">1</span>; }
  <span class="hljs-selector-class">.padding-right2</span>: { <span class="hljs-attribute">padding-right</span>: <span class="hljs-number">8px</span>; }
  <span class="hljs-selector-class">.width6</span> { <span class="hljs-attribute">width</span>: <span class="hljs-number">128px</span>; }
  <span class="hljs-selector-class">.height6</span> { <span class="hljs-attribute">height</span>: <span class="hljs-number">128px</span>; }
</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;flex&#x27;</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;flex-shrink0 padding-right2 width6 height6&#x27;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#x27;…&#x27;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&#x27;…&#x27;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;flex-grow1&#x27;</span>&gt;</span>
    Here’s an atomic media object.
  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
</code></pre>
  <figcaption>
<p>Note how each class in the atomic version maps to just a single CSS property and value. In fact, if I hadn’t included the second <code>&lt;style&gt;</code> block, I bet you’d have had no problem determining each class’ effect from the markup alone! This is a hallmark of atomic CSS — the effect of a class is typically self evident from its name alone, whereas the specifics of a class name like <code>media</code> are more ambiguous.</p>
  </figcaption>
</figure>
<p>For anyone familiar with atomic CSS today, the example above will likely appear unremarkable. The transition towards this approach was anything but, however — and on some corners of the web today, debate still rages about whether atomic CSS has been the best or worst thing to happen to styling on the web since CSS.</p>
<p>There was, however, clearly an appetite for this approach amongst a non-trivial swath of web developers: the year 2014 saw the release of both Adam Morse’s <a href="https://tachyons.io/" rel="noopener noreferrer" target="_blank">Tachyons</a> and Brent Jackson’s <a href="https://basscss.com/" rel="noopener noreferrer" target="_blank">Basscss</a>, the first two frameworks to go all-in on atomic CSS. These frameworks were instrumental in writing the blueprints for the atomic CSS methodology and turning the status quo on its head — and indeed, the shift was so monumental that, within a number of years, ‘utility-first’ CSS frameworks started becoming <a href="https://adamwathan.me/tailwindcss-from-side-project-byproduct-to-multi-mullion-dollar-business/" rel="noopener noreferrer" target="_blank">multimillion dollar businesses</a>.</p>
<p>The atomization of CSS had officially begun.</p>
<h2 id="atomic-css%3A-successes-and-perceived-failures">Atomic CSS: successes and perceived failures</h2>
<p>In order to understand the success of atomic CSS (even if that success remains a point of debate in some circles), we should first examine its principles, and the goals those principles seek to achieve. Many of these principles are derived from <a href="https://en.wikipedia.org/wiki/Functional_programming" rel="noopener noreferrer" target="_blank">functional programming</a>, hence the alternative name ‘functional CSS’. Additional inspiration came from <a href="https://en.wikipedia.org/wiki/Unix_philosophy" rel="noopener noreferrer" target="_blank">the Unix philosophy</a>.</p>
<p>The most fundamental principles of atomic CSS are:</p>
<dl class='pl2'>
  <dt>Classes should have a single purpose.</dt>
  <dd class='mb0'>Classes should do one thing, and they should do it well. This makes each class more reusable. A class that applies a margin, and only a margin, is more reusable than a class that applies and margin and a text colour.</dd>
  <dt>A class’ effect should be self evident.</dt>
  <dd class='mb0'>There should be no mystery about the effect of using a class — clarity should always trump cleverness. The effect of a class named <code>flex</code> which sets the <code>display</code> property to <code>flex</code> is self evident. The effect of a class named <code>media</code> which may set any number of property values is ambiguous.</dd>
  <dt>Classes should be composable.</dt>
  <dd class='mb0'>Complex styles should be achieved by composing multiple single purpose classes together, rather than by writing new, complex, and less reusable classes.</dd>
  <dt>Classes should be immutable and free of side effects.<dt>
  <dd class='mb0'>For example, the <code>underline</code> class should only ever apply an underline style. It should never <em>not</em> apply the underline, or apply another style, or change any other property of any other element. Under no circumstances should it change the effect of another class.</dd>
</dl>
<p>It’s important to note that these principles were not devised for their own sake — each plays an important role in authoring performant, maintainable, robust styles:</p>
<ul>
<li>Single purpose classes are more reusable and composable than multipurpose classes. Thus, single purpose classes provide <strong>greater flexibility</strong> as well as <strong>reduced CSS file sizes</strong>, both at the outset of new projects and throughout their lifecycle (as fewer styles need to be added to deliver iterations and additions to UI).</li>
<li>Classes with singular, self evident effects <strong>reduce cognitive overhead for developers</strong>; the resultant styling systems are thus easier to learn, and this in turn helps frontend teams scale their efforts across people and time.</li>
<li>Classes which are immutable and free of side effects result in <strong>fewer bugs</strong> — and where bugs occur, easier debugging and resolution follows.</li>
</ul>
<p>In these ways and in others, I have always felt that the nature of atomic CSS flows very much with the grain of CSS itself. Remember that CSS was designed to be independent of markup, and atomic CSS is by design untethered to any particular markup structure or content based semantics. Atomic CSS also honors CSS’ specificity algorithm rather than attempting to game it — it does not concern itself with optimized selector ranking or scope, since every class is of single purpose and equal specificity. This also means <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/inheritance" rel="noopener noreferrer" target="_blank">CSS’ inheritance model</a> becomes an advantage as it was originally intended: compositions can be built up with inheritance in mind, over several layers of markup.</p>
<p>There are, however, many common objections raised against the atomic CSS methodology. In general, these tend to be:</p>
<dl class='pl2'>
  <dt>’It’s not semantic.’</dt>
  <dd class='mb0'>We’ve touched on this already, but it’s worth repeating: semantics, accessibility, and clarity <em>do</em> matter, but with all due respect to <a href='https://www.zeldman.com/2017/01/03/kiss-my-classname/'>Zeldman</a>, there is nothing inherently unsemantic, inaccessible, or unclear about ‘visual class names’, nor is there a reason for CSS to map to the same semantics as HTML.</dd>
  <dt>‘This is inline styles all over again.’</dt>
  <dd class='mb0'>Nope. Inline styles are defined in HTML; atomic classes are defined in a style sheet. Inline styles do not permit media queries, pseudo elements, or pseudo classes; atomic classes do. Inline styles have a specificity ranking of 1-0-0-0, which can only be outranked by <code>!important</code>; atomic classes have a specificity of 0-0-1-0, the same as any single class. An inline style’s source of truth is its own singular invocation on a given element; an atomic class’ source of truth is a style sheet. There is a lexical resemblance between <code>class='red'</code> and <code>style='color: red'</code>; this is where the similarities end.
  <dt>‘Putting so many classes on my elements looks ugly/is hard to read.’</dt>
  <dd class='mb0'>
<p>Admittedly, <code>&lt;article class=‘font-sans text1-xl leading4 m-auto mt0 mb0 mt2-md mb2-md mt4-lg mb4-lg p0 p2-sm p4-md p5-lg p6-xl’/&gt;</code> doesn’t read like poetry (and yes, that snippet is taken from <a href="https://begin.com/blog/posts/2023-01-10-past-informs-the-present-our-approach-to-css" rel="noopener noreferrer" target="_blank">this very page</a> as of this writing). However, something that <em>is</em> a delight is being able to rapidly iterate on this composition — from the logical origin of that composition (the markup), whether in the browser or my editor — to explore <a href='https://www.colepeters.dev/posts/an-introduction-to-constraint-based-design-systems'>different combinatorial spaces within the bounds of a design system</a>. Iterating in this fashion simply cannot be matched when using other methodologies.</p>
  </dd>
  <dt>‘This is so not <a href='https://en.wikipedia.org/wiki/Don%27t_repeat_yourself'>DRY</a>.’</dt>
  <dd class='mb0'>It’s true, atomic CSS can lead to repeating <em>declarations</em> of various styling rules — but I vastly prefer repeating declarations to repeating <em>definitions</em> (which, in my experience, are much harder to maintain). Also, remember that every time you repeat a class name, that’s one more addition you didn’t have to make to your style sheet! Ultimately, this is a matter of choosing what kind of repetition you want, not one of avoiding repetition altogether.</dd>
  <dt>‘Atomic CSS is at odds with modern component modeling.’</dt>
  <dd class='mb0'><a href='https://reactjs.org/docs/thinking-in-react.html'>‘Thinking in React’</a> is one of those articles that changed the way I thought about web development when it was published, and there’s no denying that building frontends on the web has become a component centric process. However, it’s important to differentiate the process of <em>thinking</em> in components and the process of <em>styling</em> components. A conceptual abstraction does not require an equivalent material abstraction, and the fact of a component’s existence does not necessitate a dedicated CSS class.
  <dt>‘This still doesn’t solve the problem of global scope or one off styles.’</dt>
  <dd class='mb0'>It doesn’t, and in fact atomic CSS is not designed for this. For scoped or one off styles, a different approach is absolutely required.</dd>
</dl>
<p>Atomic CSS can provide a fantastic foundation that covers the vast majority of styling needs for a given website and its constituent components, and it can deliver those styles in a fraction of the file size and complexity of other methodologies. To be clear, these claims are not theoretical: this has been my experience both as a contributor and leader of frontend teams over the past 8 years, and the same has been true for many others both within and outside of my professional circle. But as we’ve noted, atomic CSS doesn’t cover every use case: scoped and one off styles are not part of its wheelhouse. So what’s to be done when a need for these sorts of styles emerges?</p>
<h2 id="going-bespoke">Going bespoke</h2>
<p>Where one off styles are needed, or where we want to ensure certain styles are scoped to a given component, additional measures beyond an atomic CSS methodology will be required. There are several techniques that can be used to address these concerns, with a few notable examples having become more popular in recent years:</p>
<dl class='pl2'>
  <dt>CSS in JS</dt>
  <dd class='mb0'>The obvious contender in this list. I used CSS in JS for many years myself, and have to say the developer ergonomics are pretty impressive, as is the ability to leverage both repeatable and bespoke, scoped styles (especially when using libraries like <a href='https://styled-system.com/'>Styled System</a> or <a href='https://theme-ui.com/'>Theme UI</a>). Unfortunately, great developer ergonomics and scoping are not enough. CSS in JS can add significant weight to client side bundles, along with increased setup complexity (especially when server side rendering is involved). Some solutions can also lock you in to certain frontend frameworks, limiting the portability of your styles. There are some solutions emerging to address these concerns (e.g. <a href='https://vanilla-extract.style/'>Vanilla Extract</a>), but at the end of the day, I admit I’m growing tired of learning abstractions of CSS — there are so many more valuable things I could be doing with my time. This isn’t necessarily a popular opinion, but I think CSS is actually pretty amazing on its own, and the closer to the metal I can stay, the happier I am.</dd>
  <dt>CSS Modules</dt>
  <dd class='mb0'>The name may suggest that CSS Modules are part of the CSS spec, but this is not the case. CSS Modules allow authors to extract styles from a vanilla <code>.css</code> file and into a JavaScript file containing markup; at build time, these extracted styles are then regenerated as locally scoped styles wherever they are used. This seems to offer some of the benefits of CSS in JS, but without the ergonomics of colocating styles, content, and behavior within a given component.</dd>
  <dt>Shadow DOM</dt>
  <dd class='mb0'>Shadow DOM is a web standards specification which is designed to provide encapsulation of content, styles, and behavior — but it has a number of hard to swallow caveats. For one, Shadow DOM roots need to be initialized in JavaScript (though <a href='https://web.dev/declarative-shadow-dom/'>Declarative Shadow DOM</a> should address this in the future.) Further, <a href='https://lamplightdev.com/blog/2019/03/26/why-is-my-web-component-inheriting-styles/'>styling encapsulation doesn’t work quite like you think it does</a>, and this can cause some headaches. I believe the Shadow DOM holds promise, but for many use cases, it can end up being more trouble than it’s worth.</dd>
</dl>
<p>Fortunately, a compelling solution for dealing with scoped and one off styles exists in the form of HTML custom elements, which are part of <a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components" rel="noopener noreferrer" target="_blank">the web components spec</a> along with Shadow DOM and HTML templates. I may be biased, but I think the best way to work with custom elements right now is with <a href="https://enhance.dev/docs/" rel="noopener noreferrer" target="_blank">Enhance</a> (though to be fair, I got a sneak peak at Enhance before joining Begin in 2022, and was just as enthusiastic at that time).</p>
<p>Using Enhance to author custom elements in the form of <a href="https://enhance.dev/docs/learn/concepts/single-file-components" rel="noopener noreferrer" target="_blank">Single File Components</a> (SFCs) has a number of huge benefits:</p>
<ol>
<li>Custom elements are expanded on the server, providing <strong>great performance and an excellent baseline for progressive enhancement</strong> on the client.</li>
<li><strong>Locally scoped, one off styles</strong> can be authored simply by including a <code>&lt;style&gt;</code> block in your SFC. When your component is expanded on the server, these style blocks will be hoisted into the document head, with all of that style block’s selectors scoped to your custom element. This allows for one off styles to be encapsulated and scoped to the component they’re authored in, without needing to touch the Shadow DOM. Scoped styles written within an SFC are also a great place to leverage strategies like <a href="https://css-tricks.com/are-we-in-a-new-era-of-web-design-what-do-we-call-it/" rel="noopener noreferrer" target="_blank">intrinsic design</a>, which can happily coexist alongside a global, atomic class system.</li>
<li>If you don’t need to write client side behavior, <strong>you never have to interface with JavaScript classes or the <a href="https://developer.mozilla.org/en-US/docs/Web/API/CustomElementRegistry" rel="noopener noreferrer" target="_blank">Custom Elements Registry</a></strong>. This is particularly handy for engineers (or designers) who might excel at HTML and CSS but lack experience in JavaScript. Although SFCs are authored as JavaScript functions, the bulk of the authored code is written in HTML and CSS, as seen below:</li>
</ol>
<pre class="hljs"><code data-language="javascript"><span class="hljs-comment">// my-button.mjs</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">MyButton</span>(<span class="hljs-params">{ html }</span>) {
  <span class="hljs-keyword">return</span> html`
    &lt;style&gt;
      /* One off styles applied only to button elements rendered by MyButton. */
      /* Any button outside this component will not be affected. */
      button {
        appearance: none;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
      }
    &lt;/style&gt;
    &lt;!-- Atomic classes used for repeating styles --&gt;
    &lt;button class=&#x27;p1 radius-pill cursor-pointer&#x27;&gt;
      &lt;slot&gt;&lt;/slot&gt;
    &lt;/button&gt;
  `
}

<span class="hljs-comment">// index.html</span>
&lt;my-button&gt;<span class="hljs-title class_">Click</span> <span class="hljs-title class_">Me</span>!&lt;/my-button&gt;
</code></pre>
<p>Of course, one need not use Enhance to gain the benefits of using custom elements. Being <a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements" rel="noopener noreferrer" target="_blank">a web platform standard</a>, you could author the above component and scoped styles without the use of Enhance — it would simply involve writing more boilerplate (although server rendering would be harder to implement from scratch). My personal experience, however, is that the current implementation of custom elements (and web components as a whole) leaves a fair bit to be desired, influenced as it is by the JavaScript framework wars of years past. Perhaps one day we’ll have a more HTML centric spec for web components (as hinted at by specs like Declarative Shadow DOM), but for now, I find the abstractions provided by Enhance to be incredibly useful and pleasant to use.</p>
<p>Enhance also comes with <a href="https://enhance.dev/docs/learn/concepts/styling/utility-classes" rel="noopener noreferrer" target="_blank">an atomic CSS system out of the box</a>, which can be easily customized to integrate with design systems or brand guidelines. Enhance thus presents an end to end styling solution that offers all the benefits of atomic CSS as well as the power to easily create one off, locally scoped styles on a per component basis. (You may have also realized that, since SFC styles are authored within a JavaScript file, those style blocks can also take advantage of some CSS in JS niceties — such as leveraging JS variables or functions — without authors having to worry about client side performance. While I’ve yet to find much of a need for this, the possibility is there.)</p>
<h2 id="summing-up">Summing up</h2>
<p>We’ve covered a lot of ground in this article — some of it historical, some of it subjective. Although I’ve used a lot of words to describe the benefits that I and many others have encountered with atomic CSS in comparison to other methodologies, I do want to assert that, as with so much on the web, your mileage may vary. Technical methodologies of all kinds inherently attract certain folks and repel others, and <a href="https://adactio.com/journal/18982" rel="noopener noreferrer" target="_blank">as Jeremy Keith has said</a>, ‘this is about matching the right tool to the right mindset’ (though, with the deepest respect to Jeremy, I look forward to rebutting some other aspects of his article in the near future).</p>
<p>With that said, I’ve found that a great deal of misinformation has been shared over the years concerning atomic CSS, and I think this has helped to create a mindset that may have kept many web professionals from giving this methodology a fair shake. As a thorough foundation for styling — especially when configured to align with a team’s design system — atomic CSS is tough to beat in terms of its performance, flexibility, and robustness across scales of complexity and time. In combination with a tight strategy for dealing with one off or scoped styles (as with Enhance SFCs), atomic CSS can act as a powerful styling API for documents, applications, and components, which will serve individuals and teams (and thus end users) well for a long time to come.</p>
<h2 id="further-reading">Further Reading</h2>
<ul>
<li><a href="https://www.w3.org/Style/CSS20/history.html" rel="noopener noreferrer" target="_blank">A Brief History of CSS Until 2016</a></li>
<li><a href="https://mrmrs.cc/writing/what-are-classes-for/" rel="noopener noreferrer" target="_blank">What Are Classes For?</a></li>
<li><a href="https://mrmrs.cc/writing/scalable-css" rel="noopener noreferrer" target="_blank">CSS and Scalability</a></li>
<li><a href="https://jxnblk.com/blog/designing-in-the-browser-faster/" rel="noopener noreferrer" target="_blank">Designing in the Browser Faster</a></li>
<li><a href="https://css-tricks.com/growing-popularity-atomic-css/" rel="noopener noreferrer" target="_blank">On the Growing Popularity of Atomic CSS</a></li>
<li><a href="https://bradfrost.com/blog/post/lets-talk-about-web-components/?ck_subscriber_id=478716172" rel="noopener noreferrer" target="_blank">Let’s Talk About Web Components</a></li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[An Introduction to Constraint Based Design Systems]]></title>
            <link>https://normalflow.pub/posts/an-introduction-to-constraint-based-design-systems</link>
            <guid>https://normalflow.pub/posts/an-introduction-to-constraint-based-design-systems</guid>
            <pubDate>Fri, 12 Aug 2022 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>Over the course of my 15 years of work in design and engineering, I’ve spent an enormous amount of time thinking about, talking about, building, and maintaining design systems — the structures that make up the foundation of modern user interfaces on the web. Particularly as I’ve grown into more and more of a specialist in this area, I’ve made it my responsibility to make sure my team(s) are all working from a shared technical perspective. This is especially important for designers and frontend engineers, as they operate in distinct but overlapping domains.</p>
<p>The proximity of the design and frontend engineering domains presents an interesting conundrum: both share a partial vocabulary and areas of concern — colour, typography, layout, permutations of state, etc. — yet these concerns come with distinct considerations and methods of execution in each domain. You’ve likely had (or heard) conversations or debates stemming from these differences before: a designer may not understand why an engineer cannot build a seemingly simple interface element, or an engineer may not comprehend why their layout being a marginal number of pixels off from a design specification is causing the designer frustration. These conversations often stem from a misalignment between designers and engineers that can, at the surface level, be hard to make sense of: shouldn’t these two be speaking the same language?</p>
<p>At its worst, this misalignment between design and engineering can present significant challenges at the organizational level: interface designs and the reality of codebases can become so divergent that teams are constantly forced to make calls between quality (or faithfulness to the designs) and speed — a choice no one enjoys making. Where those decisions aren’t made explicitly, features and entire products can get held up for inordinate amounts of time as colleagues attempt to reconcile these differences on a case by case basis — or, barring time being available for this, these differences can be relegated to no one’s favourite to do piles: technical debt and design debt.</p>
<p>These challenges, among others, are what make the successful implementation of design systems a necessity for teams collaborating on digital products. When designers and engineers operate from a shared understanding and point of departure, they unlock the ability to create work that is inherently consistent, repeatable, flexible, and greater than either could devise in isolation.</p>
<p>This premise is what lies at the heart of this article, which in turn has been born from years of my own experience in onboarding and mentoring engineers and designers in the area of design systems. In order to avoid delving into domain specific concerns, this article goes heavy on theory and application, and light on implementation. While some implementation details are necessarily touched on, this article is not meant to inform the specific implementation of a design system. Rather, my intent is to present a rigorous conceptual foundation from which any effective design system on the web may be constructed or analyzed.</p>
<p>Let’s get into it.</p>
<h2 id="what-is-a-design-system%3F">What is a design system?</h2>
<p>It’s important to begin by acknowledging that design systems — despite the current fervour they enjoy in the tech industry — are not a new concept. Humans have been designing things with great intent for millennia, and systems which formalize those designs have existed in some form or another for nearly as long. Design systems practitioners thus have a deep and rich history upon which to draw.</p>
<p>But what exactly is a design system? I find this excerpt from <a href="https://www.designsystems.com/christopher-alexander-the-father-of-pattern-language/" rel="noopener noreferrer" target="_blank">an article on Figma’s Design Systems website</a> to be a great starting point (though I’ve swapped their use of the term ‘design pattern’ for ‘design system’, for consistency):</p>
<blockquote>
<p>[…] a design system is a formal way of documenting solutions to common design problems. Design systems are a universal resource to align best practices, describe the elements of good designs, and most importantly, provide a repository so that other people can easily reuse these solutions. Why invent the wheel when a perfectly good one already exists?</p>
<p>Modern designers rely on design systems to quickly get new designers up to speed on brand nuances, capture collective wisdom across time and people, provide teams with a common language, eliminate wasted time spent on “double work,” and ensure the end user gets a predictable experience no matter the medium or designer.</p>
</blockquote>
<p>The objective of <strong>capturing collective wisdom across time and people</strong> is crucial. Design systems do not exist purely for the sake of defining rules. These rules (or solutions) must be the result of incisive and collective problem solving, and these solutions should be able to be reused by others for as long as the parameters defining those problems remain unchanged.</p>
<p>The above description of design systems provides a good theoretical starting point, but how do design systems manifest in practice? This answer will vary between different fields of study (city planning, architecture, graphic design, computer programming, etc.), but when it comes to digital products, I define a design system as containing:</p>
<ol>
<li><strong>A brand design specification</strong> (high-level typography, colour palette, layout sensibilities, etc.)</li>
<li><strong>A reusable component library</strong> — that is, a collection of components which convey that brand design through practical applications (discrete typographic elements, iconography, interactive elements, etc.)</li>
<li><strong>A modular codebase</strong>, which turns these components into reality for end users</li>
</ol>
<p>Thus, a design system defines not only the look and feel of an organization, but also the way in which users interact with an organization’s digital products and services. In other words: the design system directly informs the implementation of the user interface.</p>
<h2 id="the-roles-and-challenges-of-user-interfaces">The roles and challenges of user interfaces</h2>
<p>User interfaces (and thus, the design systems that underpin them) are at their most effective when they remove the friction that exists between an organization’s users and their goals. Those goals must, in turn, inform the implementation of the design system. In considering these goals, we must be careful not to confuse means with ends:</p>
<blockquote>
<p>People don’t want to use your software.</p>
<p>They want to lose weight, laugh, be entertained, get smarter, spend time with loved ones, go home on time, sleep adequately, eat good food, be happy.</p>
<p>Your product is only as good as the experiences it enables people to have.</p>
<p>— <a href="https://twitter.com/shl/status/1162031786248900609?s=20" rel="noopener noreferrer" target="_blank">@shl</a></p>
</blockquote>
<p>All interfaces crafted by designers and developers must originate from the needs of an organization’s users. In order for an interface to successfully deliver on this premise, it must be:</p>
<ul>
<li>Consistent (to build trust and familiarity)</li>
<li>Predictable (to set expectations and reduce cognitive load),</li>
<li>Efficient (to honour that most important resource — time)</li>
<li>Accessible (to make the interface available to as many people as possible)</li>
</ul>
<p><strong>It is thus the job of the design system to dictate how an organization should create user interfaces that are consistent, predictable, efficient, and accessible.</strong></p>
<p>While these attributes are critical for an organization’s users, it’s often forgotten that they are also important for the designers and engineers tasked with building these interfaces in the first place. A design system that is not consistent, predictable, efficient, and accessible for an organization’s designers and engineers can hardly be expected to be serviceable in the crafting of great user interfaces.</p>
<p>Herein lies the challenge, especially for growing organizations: solving for consistency, predictability, efficiency, and accessibility becomes harder as the number of people working in this problem space — and the size of the problem space itself — increases. This is down to the relationship between <a href="https://www.youtube.com/watch?v=YM-uykVfq_E">the scale of systems and their entropy</a> — or, in overly simplified terms: the tendency of systems to move towards disorder. In order to keep our systems in check, we need to focus on the parameters that define them. This is where the use of constraints becomes critical.</p>
<h2 id="embracing-constraints">Embracing constraints</h2>
<p>Effective designs optimize for constraints. This applies to any form of design: architecture, engineering, software, product design, and so on. These constraints are not just useful, they are critical: a beautiful building not designed for the constraints of tectonic movement and climate variability will collapse, and products not designed for the myriad constraints of the web will never amass a critical user base. Furthermore, a design system without adequate constraints will quickly grow into a disordered mess, especially as more contributors join in and more design problems are encountered.</p>
<p>Systems built for constraints tend towards greater degrees of maintainability and learnability — making them more stable, faster to iterate on, and easier to learn in the first place.</p>
<p>Let’s use a simple example to demonstrate.</p>
<h3 id="constraints-in-practice%3A-spacing-scales">Constraints in practice: spacing scales</h3>
<p>How many times have you been working on a layout (either as a designer or an engineer) and thought to yourself, ‘How many pixels should <em>this</em> be placed away from <em>that</em>?’ How many times have you gone with your gut, trying out variations of numbers until it ‘looked right’? How many times have you had to ask your designer for a redline, or ask your engineer to change a 13 pixel margin to a 14 pixel margin?</p>
<p>Now, how many times have you encountered something designed or coded by someone else on your team where they also adjusted a layout until it ‘looked right’, but the measurements they used were different from yours? How do you decide which one is correct? And are you going to remember that pixel value next time you need to space something out? How would a new hire know which value to use? Isn’t this exhausting? Wouldn’t you rather be working on something more important?</p>
<p>Of course you would. Let’s talk about spacing scales.</p>
<p>The idea behind spacing scales is this: any (and every) given layout should use only certain, consistent increments of space between discrete elements in that layout. Need an input to be some distance away from its label? Pick a value from the spacing scale. Designing a grid layout? The gutters between each column and row are sized with a value from the spacing scale, too. Every element of your UI, with rare exception, should be spaced apart from other elements by an interval of space found on your spacing scale.</p>
<figure>
  <post-image src='/_public/images/design-systems/spacing-scale.jpg' alt=''></post-image>
  <figcaption>A rough sketch of a spacing scale and its use with component and page layouts</figcaption>
</figure>
<p>Spacing scales are ‘modular’ in nature (as opposed to a continuous range), where each step in the scale is a given proportion larger than the previous one. A spacing scale could be based on powers of 2, for example (<code>4px, 8px, 16px, 32px, 64px, …</code>), or <a href="https://www.modularscale.com/?1&amp;em&amp;1.618">something more complex</a>. The important thing is deciding on a scale that makes sense for the team, baking that scale into your design tools and codebase, and then sticking to it.</p>
<p>Spacing scales are a great example of a constraint-based design pattern that solves problems at many levels. They effectively eliminate the use of ‘magic numbers’ (unique values chosen by feel or with otherwise illogical origins), and they greatly reduce time spent on <a href="https://en.wikipedia.org/wiki/Law_of_triviality">bikeshedding</a>, while also creating a harmonious, rhythmic, consistent layout across entire interfaces and products. Once designers and engineers get familiar with these scales, they can even reduce the degree to which designs need to be redlined by the designer (or inspected for precise values by the engineer) — repeated intervals become recognizable at a glance and thus speed up ideation, implementation, and iteration. For recently hired designers and engineers, spacing scales also reduce the time needed to learn and internalize a design system.</p>
<p>Especially when well implemented in design tools and codebases, spacing scales push layout design towards a process that is more <a href="https://en.wikipedia.org/wiki/Parametric_design#:~:text=Parametric%20design%20is%20a%20design,design%20intent%20and%20design%20response.">parametric</a> and less idiosyncratic. Importantly, this does not mean that using spacing scales or constraint based design systems kills creativity. It is, after all, still up to designers and engineers to define spacing scales and other responses to constraints in the first place, and problem solving within constraints is itself a highly creative act.</p>
<h3 id="putting-constraints-to-work">Putting constraints to work</h3>
<p>Scales and other parametric values can and should be used not only for spacing units, but also for grids, font sizes, colour palettes, and more. By constraining the possible values and variations in a design system, we can reduce the number of things a designer or engineer has to learn about that design system. This also enforces consistency and predictability at a high level. The decision of what attributes should be mapped to constraints within a design system is one that is likely to vary between organizations, but to provide an example, here’s what the design system I headed up development on at <a href="https://ellii.com">Ellii</a> defined in terms of parameters, and how many values were defined for each:</p>
<ul>
<li>breakpoints (4)</li>
<li>colours (~50 — though we only relied on roughly a quarter of these in regular use)</li>
<li>drop shadows (4)</li>
<li>font sizes (9)</li>
<li>letter spacings (5)</li>
<li>line heights (4)</li>
<li>border radiuses (3)</li>
<li>spacing increments (8)</li>
</ul>
<p>With just these 8 parameters and (aside from our colour swatches) a small set of values for each, we were able to craft a design system that was tightly constrained yet incredibly flexible. These core parameters in large part defined the implementation of everything that ended up on screen, from minute typographic details to entire page layouts and complex interactive components. It also allowed our designers and engineers to design, build, and iterate quickly within a broad but well defined conceptual sandbox.</p>
<p>Methods for implementing these kinds of constraints within an organization’s design tools and codebase can be nearly as varied as the composition of the design systems themselves. However, given the explosion of interest in design systems in recent years, a growing number of options are gaining popular support. <a href="https://www.figma.com/community/tag/design%20tokens/plugins">Design token plugins for Figma</a>, for example, are providing designers with programmatic ways of codifying and using design system constraints within their wireframes, mockups, and prototypes. As a frontend engineer, I’ve been making use of (and loving) Brent Jackson’s <a href="https://styled-system.com/">Styled System library</a> since it first emerged in 2017; <a href="https://theme-ui.com/">Theme UI</a> is another appealing option. For those not working in React, a constraint based design system can easily be implemented in vanilla CSS — <a href="https://tailwindcss.com/">Tailwind</a>, a popular functional CSS library, is even <a href="https://tailwindcss.com/docs/configuration">geared towards use within design systems</a>.</p>
<p>However, simply implementing constraints when constructing a design system is not enough. Design systems are typically not static — organizations’ needs change over time, new problem spaces are opened up, and sometimes these spaces require solutions to problems that were never considered when the design system was implemented. Working with constraints, then, is not a ‘set it and forget it’ affair. We must learn how to effectively manage constraints over time.</p>
<h2 id="surface-area%2C-volume%2C-and-the-complexity-of-systems">Surface area, volume, and the complexity of systems</h2>
<p>In a simpler world, the parameters and values that underpin a design system would be decided on once, and then used forever. Reality, of course, is rarely so straightforward.</p>
<p>Iterations on design systems must be treated with caution. Sometimes, a seemingly simple adjustment to a design system is all that’s required — an additional colour swatch here, an extra font size there. However, even the simplest of changes poses the risk of adding exponential complexity to a design system. To help people understand why, I find it helpful to take a brief detour into the world of geometry (I promise this will be painless).</p>
<p>First, a quick recap of terminology: when describing three dimensional objects, we can use the term ‘surface area’ to describe the size of an object’s exterior (e.g. the combined size of a cardboard box’s outer panels), and the term ‘volume’ to describe the size of the space contained by an object (e.g. the amount of space inside that same cardboard box). When three dimensional objects grow, something interesting happens in the relationship between their surface area and their volume — they don’t grow at the same rate:</p>
<blockquote>
<p>Consider a cube. As the cube grows in size, its volume grows faster than its surface area. To be precise (and forgive me if this seems too obvious to be worth stating) its volume is 𝑥³, while its surface area is 6(𝑥²) for a given edge-length 𝑥.</p>
<p>— <a href="http://www.lagado.name/blog/the-volume-and-surface-area-of-computer-programs/" rel="noopener noreferrer" target="_blank">The Volume and Surface Area of Computer Programs</a></p>
</blockquote>
<figure>
  <post-image src='/_public/images/design-systems/cube.jpg' alt=''></post-image>
  <figcaption>A sketch demonstrating differences in the rate of change between a cube’s surface area and volume</figcaption>
</figure>
<p>Now, let’s consider a colour palette — say, the most minimal of colour palettes, black and white. With just black and white in our palette, we can only create 2 different colour combinations:</p>
<div role='table'>
  <div role='rowgroup'>
    <div role='row' class='thead grid grid-col col-2'>
      <span role='columnheader'>
        Colours
      </span>
      <span role='columnheader'>
        Colour combinations
      </span>
    </div>
  </div>
  <div role='rowgroup'>
    <div role='row' class='tbody grid grid-col col-2'>
      <ol role='cell' class='pl0'>
        <li>White</li>
        <li>Black</li>
      </ol>
      <ol role='cell' class='pl0'>
        <li>White/black</li>
        <li>Black/white</li>
      </ol>
    </div>
  </div>
</div>
<p>What happens if we add a third colour — say, red? How many colour combinations can we create now?</p>
<div role='table'>
  <div role='rowgroup'>
    <div role='row' class='thead grid grid-col col-2'>
      <span role='columnheader'>
        Colours
      </span>
      <span role='columnheader'>
        Colour combinations
      </span>
    </div>
  </div>
  <div role='rowgroup'>
    <div role='row' class='tbody grid grid-col col-2'>
      <ol role='cell' class='pl0'>
        <li>White</li>
        <li>Black</li>
        <li>Red</li>
      </ol>
      <ol role='cell' class='pl0'>
        <li>White/black/red</li>
        <li>White/red/black</li>
        <li>Black/white/red</li>
        <li>Black/red/white</li>
        <li>Red/white/black</li>
        <li>Red/black/white</li>
      </ol>
    </div>
  </div>
</div>
<p>By adding just a single colour to our palette of two colours, we’ve tripled the amount of colour combinations available to us. Now imagine how adding a single colour creates variations not just in the colour palette itself, but in the amount of possible combinations with other design system parameters like font sizes. This growth relationship sounds familiar, doesn’t it?</p>
<p>A design system’s distinct parameters, and the values those parameters can take on, can be considered <strong>the surface area of a design system</strong>: collectively, they outline of the space of possibilities that the design system can produce. Every time that surface area increases — one more colour, one more font size — <strong>the volume of the design system</strong>, or the combined ways in which all those parameters and attributes can interact as a whole, increases at an even faster rate.</p>
<p>Along with this growing combinatory space, we also need to consider the qualitative complexity introduced by changes to a design system. Returning to the example of adding a single colour to a colour palette, a number of questions immediately come to mind:</p>
<ul>
<li>Why is this colour needed?</li>
<li>What should this colour be named?</li>
<li>Is this colour intended to carry a semantic meaning? If so, what?</li>
<li>Where should this colour be used? Where should it not be used?</li>
<li>What other colours in our design system does this colour work well with? What colours should it not be combined with?</li>
<li>Can it be used accessibly with other colours in our design system?</li>
<li>Will variations of this colour be needed in addition to the colour itself?</li>
</ul>
<p>As the volume of a design system increases, so too does its complexity. Some complexity in any design system is unavoidable, and to a degree it can even be desirable as a means of expressing versatile possibilities. However, too much complexity in design and engineering inevitably leads to disorder — inconsistencies, unpredictability, inefficiency, and inaccessibility, the exact things the design system aims to reduce in the first place.</p>
<p>This is not to suggest that design systems should not be iterated on over time, or that the constraints placed on a design system during its formation should be immutable. All design systems that exist for long enough will require modification. The point is that a system’s constraints and their implications must be a permanent concern for design systems practitioners — and that changes to those constraints must be made with considerate intention.</p>
<h2 id="summary%3A-design-systems-and-cohesion">Summary: design systems and cohesion</h2>
<p>A design system is, at its core, a unifying tool. Implemented effectively, design systems reconcile an organization’s intent with its artefacts, by creating cohesion between the makers of those artefacts — that is, the organization’s designers and engineers.</p>
<p>Great design systems go beyond design and engineering staff, though; they are critical in producing an end result that the entire organization can depend on, from quality assurance and management to communications and commerce. Maintaining the stability of a design system, then, is no small feat, and this task must be afforded the proper time and attention to do so.</p>
<p>Especially as the number of people contributing to and making use of a design system grows, effective communication becomes critical. Designers and engineers must be in regular, constructive dialogue, and those leading the development and maintenance of design systems must have tight feedback loops with the organization as a whole. When this is not the case, the risk of a design system falling into disorder grows. This can have disastrous impacts across entire organizations.</p>
<p>In my experience, the best way to prevent this kind of disorder from growing is to ensure that design systems practitioners meet regularly and proactively — of course, always keeping the system’s constraints in mind. Some organizations may be large enough to support a dedicated, cross-functional design systems team; in these situations, regular meetings and tight communication loops are hopefully a foregone conclusion. In smaller organizations, where a design system may be built and maintained by designers and engineers who spend most of their time working directly on products, booking regular meetings (either biweekly or monthly) to focus on the design system is essential. In organizations of all sizes, keeping asynchronous channels of communication open to everyone is also important (e.g. a public design systems channel on Slack), as is working to eliminate any extant silos between designers and engineers, and building effective cross-functional teams.</p>
<p>It also bears stating that great design systems require great documentation. Even with a multitude of well thought out constraints in place, we must remember that new hires may not be familiar with design systems in principle, or with the problem space that your particular design system operates within. (You can, of course, feel free to send this article around to those not familiar with design systems — but you should document your specific system well, too.)</p>
<p>Constructed and maintained with a foundation of proactive and informed communication, design systems become an incredibly powerful organizational asset. They enable the creation of consistent, predictable, efficient, and accessible user interfaces, which in turn bring end users closer to their goals. Properly implemented, they also do this at scale: an organization’s designers and engineers who are not themselves design system contributors save immense amounts of time by simply reusing the artefacts produced by the design system (its components), and can thus focus on building proverbial rocket ships without worrying about manufacturing their own nuts, bolts, and fuel sources.</p>
<p>This, at least, has been my experience. I hope that this article might help make this your experience, too.</p>
<h2 id="acknowledgements">Acknowledgements</h2>
<p>This article draws deeply on my own work in crafting successful design systems at multiple organizations over the past 8 years, as well as my experiences as a designer/engineer hybrid in the years before that. My work, in turn, has particularly benefitted from learning from <a href="https://mrmrs.cc/" rel="noopener noreferrer" target="_blank">Adam Morse</a> and <a href="https://jxnblk.com/" rel="noopener noreferrer" target="_blank">Brent Jackson</a>, and I would be remiss not to thank them for their inspiration, guidance, and incredible setting of examples through the years. Further thanks go out to Adam for providing feedback on this article prior to its publication.</p>
]]></content:encoded>
        </item>
    </channel>
</rss>